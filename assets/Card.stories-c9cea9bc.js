import{S as z,i as F,s as G,c as u,a as w,m as p,b as d,t as m,d as c,e as _,f as i,g as j,j as k,k as q,l as E,n as I,o as H,p as J}from"./index-e2bf008c.js";import{p as K,M as L,C as v,T as N,S,B as P}from"./collect-stories-3c969da1.js";import{c as B}from"./helpers-5fa58f44.js";function Q(o){let t;return{c(){t=E("Card content")},m(n,a){d(n,t,a)},d(n){n&&_(t)}}}function R(o){let t,n;const a=[o[0]];let r={$$slots:{default:[Q]},$$scope:{ctx:o}};for(let s=0;s<a.length;s+=1)r=j(r,a[s]);return t=new v({props:r}),{c(){u(t.$$.fragment)},m(s,l){p(t,s,l),n=!0},p(s,l){const f=l&1?k(a,[q(s[0])]):{};l&2&&(f.$$scope={dirty:l,ctx:s}),t.$set(f)},i(s){n||(m(t.$$.fragment,s),n=!0)},o(s){c(t.$$.fragment,s),n=!1},d(s){i(t,s)}}}function U(o){let t;return{c(){t=I("p"),t.textContent='Add optional actions with slot="actions" in the element you will put the actionable content.'},m(n,a){d(n,t,a)},p:H,d(n){n&&_(t)}}}function V(o){let t;return{c(){t=E("button")},m(n,a){d(n,t,a)},d(n){n&&_(t)}}}function W(o){let t,n,a;return n=new P({props:{raised:!0,$$slots:{default:[V]},$$scope:{ctx:o}}}),{c(){t=I("span"),u(n.$$.fragment),J(t,"slot","actions")},m(r,s){d(r,t,s),p(n,t,null),a=!0},p(r,s){const l={};s&2&&(l.$$scope={dirty:s,ctx:r}),n.$set(l)},i(r){a||(m(n.$$.fragment,r),a=!0)},o(r){c(n.$$.fragment,r),a=!1},d(r){r&&_(t),i(n)}}}function X(o){let t,n;const a=[o[0]];let r={$$slots:{actions:[W],default:[U]},$$scope:{ctx:o}};for(let s=0;s<a.length;s+=1)r=j(r,a[s]);return t=new v({props:r}),{c(){u(t.$$.fragment)},m(s,l){p(t,s,l),n=!0},p(s,l){const f=l&1?k(a,[q(s[0])]):{};l&2&&(f.$$scope={dirty:l,ctx:s}),t.$set(f)},i(s){n||(m(t.$$.fragment,s),n=!0)},o(s){c(t.$$.fragment,s),n=!1},d(s){i(t,s)}}}function Y(o){let t,n,a,r,s,l,f,D,C,O,y,M,g,b;return t=new L({props:{title:"Atoms/Card",component:v}}),a=new N({props:{$$slots:{default:[R,({args:e})=>({0:e}),({args:e})=>e?1:0]},$$scope:{ctx:o}}}),s=new S({props:{name:"Default",args:o[0]}}),f=new S({props:{name:"Outlined",args:B(o[0],{outlined:!0})}}),C=new S({props:{name:"Secondary",args:B(o[0],{secondary:"secondary"})}}),y=new S({props:{name:"Color",args:B(o[0],{color:"yellow"})}}),g=new S({props:{name:"actions",$$slots:{default:[X,({args:e})=>({0:e}),({args:e})=>e?1:0]},$$scope:{ctx:o}}}),{c(){u(t.$$.fragment),n=w(),u(a.$$.fragment),r=w(),u(s.$$.fragment),l=w(),u(f.$$.fragment),D=w(),u(C.$$.fragment),O=w(),u(y.$$.fragment),M=w(),u(g.$$.fragment)},m(e,$){p(t,e,$),d(e,n,$),p(a,e,$),d(e,r,$),p(s,e,$),d(e,l,$),p(f,e,$),d(e,D,$),p(C,e,$),d(e,O,$),p(y,e,$),d(e,M,$),p(g,e,$),b=!0},p(e,[$]){const T={};$&3&&(T.$$scope={dirty:$,ctx:e}),a.$set(T);const h={};$&3&&(h.$$scope={dirty:$,ctx:e}),g.$set(h)},i(e){b||(m(t.$$.fragment,e),m(a.$$.fragment,e),m(s.$$.fragment,e),m(f.$$.fragment,e),m(C.$$.fragment,e),m(y.$$.fragment,e),m(g.$$.fragment,e),b=!0)},o(e){c(t.$$.fragment,e),c(a.$$.fragment,e),c(s.$$.fragment,e),c(f.$$.fragment,e),c(C.$$.fragment,e),c(y.$$.fragment,e),c(g.$$.fragment,e),b=!1},d(e){e&&(_(n),_(r),_(l),_(D),_(O),_(M)),i(t,e),i(a,e),i(s,e),i(f,e),i(C,e),i(y,e),i(g,e)}}}function Z(o){return[{class:""}]}class x extends z{constructor(t){super(),F(this,t,Z,Y,G,{})}}const A=K(x,{meta:{title:"Atoms/Card"},stories:{"tpl:default":{name:"default",template:!0,source:"<Card {...args}>Card content</Card>",hasArgs:!0},Default:{name:"Default",template:!1,source:"",hasArgs:!1},Outlined:{name:"Outlined",template:!1,source:"",hasArgs:!1},Secondary:{name:"Secondary",template:!1,source:"",hasArgs:!1},Color:{name:"Color",template:!1,source:"",hasArgs:!1},actions:{name:"actions",template:!1,source:`<Card {...args}>
  <p>Add optional actions with slot="actions" in the element you will put the actionable content.</p>
  <span slot="actions">
    <Button raised>button</Button>
  </span>
</Card>`,hasArgs:!0}},allocatedIds:["default","Meta","Template","Story","Button","Card","copyAndModifyArgs"]}),ne=A.meta,ae=["Default","Outlined","Secondary","Color","actions"],re=A.stories.Default,oe=A.stories.Outlined,le=A.stories.Secondary,$e=A.stories.Color,fe=A.stories.actions;export{$e as Color,re as Default,oe as Outlined,le as Secondary,ae as __namedExportsOrder,fe as actions,ne as default};
