import{S as v,i as C,s as I,c as p,a as _,m as f,b,t as $,d as u,e as h,f as c,g as O,h as W}from"./index-88099bba.js";import{g as j,a as q}from"./spread-8a54911c.js";import{p as E,M as k,l as T,T as z,S}from"./collect-stories-a5d29a75.js";import{c as L}from"./helpers-5fa58f44.js";function B(a){let s,r;const o=[a[0]];let i={};for(let t=0;t<o.length;t+=1)i=O(i,o[t]);return s=new T({props:i}),s.$on("change",function(){W(a[0]["on:change"])&&a[0]["on:change"].apply(this,arguments)}),s.$on("populated",function(){W(a[0]["on:populated"])&&a[0]["on:populated"].apply(this,arguments)}),{c(){p(s.$$.fragment)},m(t,m){f(s,t,m),r=!0},p(t,m){a=t;const l=m&1?j(o,[q(a[0])]):{};s.$set(l)},i(t){r||($(s.$$.fragment,t),r=!0)},o(t){u(s.$$.fragment,t),r=!1},d(t){c(s,t)}}}function F(a){let s,r,o,i,t,m,l,A,d,w,g,y;return s=new k({props:{tags:["autodocs"],title:"Atoms/Select",component:T}}),o=new z({props:{$$slots:{default:[B,({args:e})=>({0:e}),({args:e})=>e?1:0]},$$scope:{ctx:a}}}),t=new S({props:{name:"Default",args:a[0]}}),l=new S({props:{name:"Label",args:L(a[0],{label:"Label"})}}),d=new S({props:{name:"Width",args:L(a[0],{width:"560px"})}}),g=new S({props:{name:"Disabled",args:L(a[0],{disabled:!0})}}),{c(){p(s.$$.fragment),r=_(),p(o.$$.fragment),i=_(),p(t.$$.fragment),m=_(),p(l.$$.fragment),A=_(),p(d.$$.fragment),w=_(),p(g.$$.fragment)},m(e,n){f(s,e,n),b(e,r,n),f(o,e,n),b(e,i,n),f(t,e,n),b(e,m,n),f(l,e,n),b(e,A,n),f(d,e,n),b(e,w,n),f(g,e,n),y=!0},p(e,[n]){const M={};n&3&&(M.$$scope={dirty:n,ctx:e}),o.$set(M)},i(e){y||($(s.$$.fragment,e),$(o.$$.fragment,e),$(t.$$.fragment,e),$(l.$$.fragment,e),$(d.$$.fragment,e),$(g.$$.fragment,e),y=!0)},o(e){u(s.$$.fragment,e),u(o.$$.fragment,e),u(t.$$.fragment,e),u(l.$$.fragment,e),u(d.$$.fragment,e),u(g.$$.fragment,e),y=!1},d(e){e&&(h(r),h(i),h(m),h(A),h(w)),c(s,e),c(o,e),c(t,e),c(l,e),c(d,e),c(g,e)}}}function G(a){return[{options:[{name:"choice 1",id:"0"},{name:"choice 2",id:"1"},{name:"choice 3",id:"2"},{name:"choice 4",id:"3"},{name:"choice 5",id:"4"},{name:"choice 6",id:"5"}],"on:change":r=>console.log("option: ",r.detail,"const onChange = (e) => selectedOption = e.detail"),"on:populated":()=>console.log("it is safe to set selectedID"),class:""}]}class H extends v{constructor(s){super(),C(this,s,G,F,I,{})}}const D=E(H,{meta:{title:"Atoms/Select",tags:["autodocs"]},stories:{"tpl:default":{name:"default",template:!0,source:"<Select {...args} on:change={args['on:change']} on:populated={args['on:populated']} />",hasArgs:!0},Default:{name:"Default",template:!1,source:"",hasArgs:!1},Label:{name:"Label",template:!1,source:"",hasArgs:!1},Width:{name:"Width",template:!1,source:"",hasArgs:!1},Disabled:{name:"Disabled",template:!1,source:"",hasArgs:!1}},allocatedIds:["default","Meta","Template","Story","Select","copyAndModifyArgs"]}),Q=D.meta,R=["Default","Label","Width","Disabled"],U=D.stories.Default,V=D.stories.Label,X=D.stories.Width,Y=D.stories.Disabled;export{U as Default,Y as Disabled,V as Label,X as Width,R as __namedExportsOrder,Q as default};
